#include <iostream>
using namespace std;

// Structure to store non-zero elements
struct Element {
    int row;
    int col;
    int value;
};

// Sparse Matrix class
class SparseMatrix {
    int rows, cols, nonZeroCount;
    Element* elements;

public:
    SparseMatrix(int r, int c, int n) {
        rows = r;
        cols = c;
        nonZeroCount = n;
        elements = new Element[n];
    }

    void read() {
        cout << "Enter row, column, and value for each non-zero element:\n";
        for (int i = 0; i < nonZeroCount; i++) {
            cin >> elements[i].row >> elements[i].col >> elements[i].value;
        }
    }

    void display() {
        int k = 0;
        cout << "\nSparse Matrix:\n";
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (k < nonZeroCount && elements[k].row == i && elements[k].col == j) {
                    cout << elements[k].value << " ";
                    k++;
                } else {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }

    ~SparseMatrix() {
        delete[] elements;
    }
};

int main() {
    int r, c, n;
    cout << "Enter number of rows, columns, and non-zero elements: ";
    cin >> r >> c >> n;

    SparseMatrix sm(r, c, n);
    sm.read();
    sm.display();

    return 0;
}
